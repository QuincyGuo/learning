(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{593:function(s,e,a){"use strict";a.r(e);var t=a(17),r=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('1、先创建静态组件，起名，RouterTrade，写html与CSS；\n2、再配置路由，router/index.js文件，\nimport Trade from "../pages/Trade";\n{\n  path: "/trade",\n  name: "RouterTrade",\n  component: Trade,\n  meta: {\n    show: true,\n  },\n},\n3、进入trade组件\nshopcart组件里进入：\n<div class="sumbtn">\n<router-link class="sum-btn"to="/trade">5算</router-link>\n</div>\n')])])]),a("h1",{attrs:{id:"用户地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户地址"}},[s._v("#")]),s._v(" 用户地址")]),s._v(" "),a("p",[s._v("从服务器获取用户地址数据，并展示在页面上，并可以切换默认地址")]),s._v(" "),a("h2",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[s._v("#")]),s._v(" 初始化")]),s._v(" "),a("h3",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[s._v("#")]),s._v(" api")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 获取用户地址信息\n// URL:/api/user/userAddress/auth/findUserAddresslist method：get\nexport const reqAddressInfo = () =>\n  requests({ url: "/user/userAddress/auth/findUserAddressList", method: "get"});\n')])])]),a("h3",{attrs:{id:"vuex三连"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex三连"}},[s._v("#")]),s._v(" vuex三连")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('1、store/index.js里注册该vuex-trade\nimport trade from "./trade";\nconst store = new Vuex.Store({\n  modules: {\n    ...\n    trade,\n  },\n});\n2、vuex-trade\nimport { reqAddressInfo } from "../../api";\nconst actions = {\n  // 获取用户地址信息\n  async getUserAddress({ commit }) {\n    let result = await reqAddressInfo();\n    if (result.code == 200) {\n      commit("GETUSERADDRESS", result.data);\n    }\n  },\n};\n\nconst mutations = {\n  GETUSERADDRESS(state, userAddress) {\n    state.userAddress = userAddress;\n  },\n};\nconst state = {\n  userAddress: [], // 用户地址数据，根据后台返回的数据来看，其类型是数组，所以这里初始化为数组\n};\n')])])]),a("h3",{attrs:{id:"trade组件的基本数据及页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trade组件的基本数据及页面"}},[s._v("#")]),s._v(" trade组件的基本数据及页面")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('1、mounted派发请求，获取数据\n  mounted () {\n    this.$store.dispatch(\'getUserAddress\');\n  },\n2、动态展示数据\n2.1、组件从state中读取数据，并存储为计算属性\nimport { mapState } from \'vuex\'\ncomputed: {\n    ...mapState({\n      userAddress: state => state.trade.userAddress,\n    }),\n},\n2.2、组件html动态展示\n<div class="address clearFix" v-for="(address) in userAddress" :key=address.id>\n    <span class="username" :class="{selected:address.isDefault==1}">{{address.consignee}}</span>\n    <p>\n      <span class="s1">{{address.fullAddress}}</span>\n      <span class="s2">{{address.phoneNum}}</span>\n      <span class="s3" v-show="address.isDefault==1">默认地址</span>\n    </p>\n</div>\n')])])]),a("h2",{attrs:{id:"默认地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#默认地址"}},[s._v("#")]),s._v(" 默认地址")]),s._v(" "),a("h3",{attrs:{id:"功能简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能简述"}},[s._v("#")]),s._v(" 功能简述")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1、初始化页面时，给默认地址添加样式\n2、点击地址，切换默认地址，同时页面底部结算位置的默认地址数据也相应改变\n")])])]),a("h3",{attrs:{id:"功能1-默认地址的初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能1-默认地址的初始化"}},[s._v("#")]),s._v(" 功能1-默认地址的初始化")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 随着地址数组的遍历显示，根据每个地址项的属性是否符合条件而显示默认地址样式\n<span class="username" :class="{selected:address.isDefault==1}">{{address.consignee}}</span>\n<p> <span class="s3" v-show="address.isDefault==1">默认地址</span> </p>\n\n// 直接获取默认地址的数据显示\n<div class="receiveInfo">\n    寄送至: <span>{{userDefaultAddress.fullAddress}}</span>\n    收货人：<span>{{userDefaultAddress.consignee}}</span>\n    <span>{{userDefaultAddress.phoneNum}}</span>\n</div>\n')])])]),a("h3",{attrs:{id:"功能2-点击切换默认地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能2-点击切换默认地址"}},[s._v("#")]),s._v(" 功能2-点击切换默认地址")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('1、添加默认地址为computed属性\ncomputed: {\n    // 默认地址\n    userDefaultAddress () {\n      // 返回用户地址数组中，默认属性为1的地址\n      return this.userAddress.find(item => item.isDefault == 1);\n    }\n},\n2、给html标签添加事件\n<p @click="changeDefault(address,userAddress)">\n   <span>\n   。。。\n</p>\n3、书写事件\nmethods: {\n    // 修改默认地址\n    changeDefault (address, userAddress) {\n      userAddress.forEach((element) => {\n        element.isDefault = 0;\n      });\n      address.isDefault = 1;\n    }\n},\n')])])]),a("h1",{attrs:{id:"商品清单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#商品清单"}},[s._v("#")]),s._v(" 商品清单")]),s._v(" "),a("p",[s._v("从服务器获取购物车数据，并展示")]),s._v(" "),a("h2",{attrs:{id:"初始化-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化-2"}},[s._v("#")]),s._v(" 初始化")]),s._v(" "),a("h3",{attrs:{id:"api-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-2"}},[s._v("#")]),s._v(" api")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 获取商品清单\n// URL:/api/order/auth/trade  method:get\nexport const reqOrderInfo = () =>\n  requests({ url: "/order/auth/trade", method: "get" });\n')])])]),a("h3",{attrs:{id:"vuex三连-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex三连-2"}},[s._v("#")]),s._v(" vuex三连")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('1、vuex-trade\nimport {reqOrderInfo } from "../../api";\nconst actions = {\n  // 获取商品清单\n  async getOrderInfo({ commit }) {\n    let result = await reqOrderInfo();\n    if (result.code == 200) {\n      commit("GETORDERINFO", result.data);\n    }\n  },\n};\n\nconst mutations = {\n\tGETORDERINFO(state, orderInfo) {\n    state.orderInfo = orderInfo;\n  },\n};\nconst state = {\n\torderInfo: {}, // 商品清单数据\n};\n')])])]),a("h3",{attrs:{id:"trade组件的基本数据及页面-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trade组件的基本数据及页面-2"}},[s._v("#")]),s._v(" trade组件的基本数据及页面")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('1、mounted派发请求\n  mounted () {\n    this.$store.dispatch(\'getOrderInfo\');// 获取商品清单数据\n},\n\n2、组件html动态展示\n<div class="detail" v-for="(order) in userOrderInfo.detailArrayList" :key="order.skuId">\n    <ul class="list clearFix">\n      <li> <img :src="order.imgUrl" style="width:100px;height:100px;"> </li>\n      <li> <p> {{order.skuName}}</p> <h4>7天无理由退货</h4> </li>\n      <li> <h3>￥{{order.orderPrice}}.00</h3> </li>\n      <li>X{{order.skuNum}}</li>\n    </ul>\n</div>\n')])])]),a("h1",{attrs:{id:"提交订单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交订单"}},[s._v("#")]),s._v(" 提交订单")]),s._v(" "),a("p",[s._v("向服务器提交订单，发送提交订单的请求")]),s._v(" "),a("h3",{attrs:{id:"api-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-3"}},[s._v("#")]),s._v(" api")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 提交订单\n// URL:/api/order/auth/submitOrder?tradeNo={tradeNo}  mehtod:post   需要带参数tradeNo, data{consigne,totalPrice...}\nexport const reqSubmitOrder = (tradeNo, data) =>\n  requests({\n    url: `order/auth/submitOrder?tradeNo=${tradeNo}`,\n    data,\n    method: "post",\n  });\n')])])]),a("h3",{attrs:{id:"从这往后-就不再使用vuex-而是将数据就存在组件本身里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从这往后-就不再使用vuex-而是将数据就存在组件本身里"}},[s._v("#")]),s._v(" 从这往后，就不再使用vuex，而是将数据就存在组件本身里")]),s._v(" "),a("h3",{attrs:{id:"集中引入api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集中引入api"}},[s._v("#")]),s._v(" 集中引入api")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('1、以前，要在组件页面中使用api，需要在每个组件里import { reqAddressInfo, reqOrderInfo } from "../../api";\n2、引入\n现在，main.js里\n// 统一引入api接口\nimport * as API from "@/api";\nnew Vue({\n  。。。\n  beforeCreate() {\n    Vue.prototype.$API = API; // 将所有的api挂载在vue原型对象上，以后就不再需要在组件里一个个引入\n  },\n}).$mount("#app");\n3、使用\nthis.$API.reqSubmitOrder(tradeNo, data);\t// 向服务器发送请求\n')])])]),a("h3",{attrs:{id:"添加事件并提交订单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加事件并提交订单"}},[s._v("#")]),s._v(" 添加事件并提交订单")]),s._v(" "),a("p",[s._v("// 这里的函数注释，可以作为自己以后整理的范例")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<a class="subBtn" @click="submitOrder">提交订单</a>\nmethods: {\n    async submitOrder () {\n      // 1、准备好需要发送请求的参数\n      let tradeNo = this.userOrderInfo.tradeNo;\n      let data = {\n        consignee: this.userDefaultAddress.consignee,\n        consigneeTel: this.userDefaultAddress.phoneNum,\n        deliveryAddress: this.userDefaultAddress.fullAddress,\n        paymentWay: "ONLINE",\n        orderComment: this.msg,\n        orderDetailList: this.userOrderInfo.detailArrayList,    // 最终要购买的商品数据数组，数组每项的内容是商品名称、价格等数据\n      }\n      // 2、发送请求\n      let result = await this.$API.reqSubmitOrder(tradeNo, data);\n      // 3、获取服务器返回结果并进行处理\n      if (result.code == \'200\') {\n        // 3.1、请求成功，则获取服务器传回的订单号，并进行路由跳转（且携带订单号作为参数进行跳转）\n        this.orderId = result.data;\n        this.$router.push(\'/pay?orderId=\' + this.orderId);\n      } else {\n        ///3.2、请求失败则打印失败原因\n        console.log(result.message);\n      }\n    }\n},\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);