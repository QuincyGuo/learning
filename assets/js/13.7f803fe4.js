(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{596:function(e,t,a){"use strict";a.r(t);var s=a(17),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"组件初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件初始化"}},[e._v("#")]),e._v(" 组件初始化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1、先创建静态组件，起名，RouterPay，写html与CSS；\n2、再配置路由，router/index.js文件，\nimport Trade from "../pages/Trade";\n{\n  path: "/pay",\n  name: "RouterPay",\n  component: Pay,\n  meta: {\n    show: true,\n  },\n},\n3、获取trade结算组件路由跳转进来携带的参数orderId\n  computed: {\n    orderId () {\n      return this.$route.query.orderId;   // 获取trade结算组件，路由跳转进来携带的参数orderId\n    }\n  }\n')])])]),a("h1",{attrs:{id:"获取订单支付信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取订单支付信息"}},[e._v("#")]),e._v(" 获取订单支付信息")]),e._v(" "),a("p",[e._v("从服务器获取订单支付信息数据，主要是根据订单号获取支付金额及支付路径")]),e._v(" "),a("h2",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[e._v("#")]),e._v(" 初始化")]),e._v(" "),a("h3",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" api")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 获取订单支付信息\n// URL:/api/payment/weixin/createNative/{orderId}   method:get   需要带参数orderId\nexport const reqGetPayInfo = (orderId) =>\n  requests({ url: `/payment/weixin/createNative/${orderId}`, method: "get" });\n')])])]),a("h3",{attrs:{id:"pay组件的基本数据及页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pay组件的基本数据及页面"}},[e._v("#")]),e._v(" pay组件的基本数据及页面")]),e._v(" "),a("p",[e._v("不允许给生命周期函数加async。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1、mounted发送请求，获取数据\n  async mounted () {\n    let result = await this.$API.reqGetPayInfo(tradeNo, data);\t// 向服务器发送请求\n  },\n// 本来这里是这样写，异步向服务器发送请求，获取数据；但是实际上尽量不要给生命周期函数前加async，所以。把这里本来要写的异步代码封装成一个函数，放到methods里。\n  \n2、实际的写法\n  mounted () {\n    // mounted调用getPayInfo，向服务器发送请求，获取订单支付数据\n    this.getPayInfo();\n  },\n\n  methods: {\n    // 向服务器发送请求，获取订单支付数据\n    async getPayInfo () {\n      // 1、发送请求\n      let result = await this.$API.reqGetPayInfo(this.orderId);\n      // 2、获取服务器返回结果并进行处理\n      if (result.code == \'200\') {\n        // 2.1、请求成功，则获取服务器传回的支付信息数据，存储到组件当中\n        this.payInfo = result.data;\n      } else {\n        // 2.2、请求失败则打印失败原因\n        console.log(result.message);\n      }\n    }\n  },\n  \n3、页面展示数据\n<span class="fr"><em class="lead">应付金额：</em><em class="orange money">￥{{payInfo.totalFee}}</em></span>\n')])])]),a("h1",{attrs:{id:"立即支付"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#立即支付"}},[e._v("#")]),e._v(" 立即支付")]),e._v(" "),a("p",[e._v("使用element-ui组件库中的messageBox组件作为弹窗组件使用，同时使用qrcode将this.payInfo里的微信支付二维码字符串转换为图片显示到弹窗上。之后定时向服务请发送查询支付状态的请求，支付成功则跳转下一路由。")]),e._v(" "),a("h2",{attrs:{id:"点击-跳出弹窗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#点击-跳出弹窗"}},[e._v("#")]),e._v(" 点击，跳出弹窗")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div class="submit"> <a class="btn" >立即支付</a> </div>\n')])])]),a("h2",{attrs:{id:"element-ui-桌面端组件库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-ui-桌面端组件库"}},[e._v("#")]),e._v(" element-ui 桌面端组件库")]),e._v(" "),a("h3",{attrs:{id:"准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[e._v("#")]),e._v(" 准备工作")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1、安装：\nnpm install --save element-ui\n2、想要按需只引入部分组件减少项目体积，需要安装：\nnpm install babel-plugin-component -D\n2.1、babel.config.js文件：\nmodule.exports = {\n  presets: ["@vue/cli-plugin-babel/preset"],\n  plugins: [\n    [\n      "component",\n      {\n        libraryName: "element-ui",\n        styleLibraryName: "theme-chalk",\n      },\n    ],\n  ],\n};\n')])])]),a("h3",{attrs:{id:"使用messagebox弹框组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用messagebox弹框组件"}},[e._v("#")]),e._v(" 使用messagebox弹框组件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1、main.js引入并注册组件\nimport{MessageBox} from 'element-ui'\n// 注册组件，将其挂载在vue原型上，这样所有的vue对象都能使用\nVue.prototype.$msgbox = MessageBox;\nVue.prototype.$alert = MessageBox.alert;\n// 还有一种注册组件的方式，将组件注册为全局组件，Vue.component(Button.name,Button);具体使用哪种，要看element-ui的文档说明。\n\n2、使用MessageBox组件\n// 立即支付，弹出二维码弹窗；使用element-ui组件库\nmethods: {\n    open () {\n      this.$alert('<strong>这是 <i>HTML</i> 片段</strong>', 'HTML 片段', {\n        dangerouslyUseHTMLString: true\n      });\n    }\n}\n// 以上是最基本的弹窗用法，下面就要为其添加属性。\n\n3、给MessageBox组件添加属性\nopen () {\n  this.$alert('<strong>这是 <i>HTML</i> 片段</strong>', 'HTML 片段', {\n    dangerouslyUseHTMLString: true,\n    center: true,                     // 居中布局\n    showCancelButton: true,           // 显示取消按钮\n    cancelButtonText: '支付遇到问题',   // 取消按钮文本\n    confirmButtonText: '已完成支付',    // 确定按钮文本\n    showClose: false,                 // 显示弹窗右上角关闭图标\n  });\n}\n")])])]),a("h2",{attrs:{id:"支付业务-生成支付二维码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支付业务-生成支付二维码"}},[e._v("#")]),e._v(" 支付业务-生成支付二维码")]),e._v(" "),a("p",[e._v("this.payInfo里的微信支付二维码数据目前是一段字符串，将其生成二维码并展示")]),e._v(" "),a("h2",{attrs:{id:"qrcode插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qrcode插件"}},[e._v("#")]),e._v(" qrcode插件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1、安装：\nnpm i qrcode --save \n2、引入并使用\nimport QRCode from 'qrcode'\t// 引入QRCode对象，里面包含一些函数方法\nlet result = QRCode.toDataURL(this.payInfo.codeUrl);\t// QRCode.toDataURL，将二维码字符串转变为图片的方法\n其返回结果是一个promise，所以写成异步函数，等待其成功后的返回结果就是生成的图片地址\nasync open () {\n     let imgUrl = await QRCode.toDataURL(this.payInfo.codeUrl);\n}\n")])])]),a("h3",{attrs:{id:"将图片二维码展示在弹窗上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将图片二维码展示在弹窗上"}},[e._v("#")]),e._v(" 将图片二维码展示在弹窗上")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 立即支付，弹出二维码弹窗；使用element-ui组件库\nasync open () {\n  let imgUrl = await QRCode.toDataURL(this.payInfo.codeUrl);\n  this.$alert(`<img src=${imgUrl}>`, '请微信支付', {\n    。。。\n  });\n}\n")])])]),a("h2",{attrs:{id:"支付业务-向后台查询支付状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支付业务-向后台查询支付状态"}},[e._v("#")]),e._v(" 支付业务-向后台查询支付状态")]),e._v(" "),a("h3",{attrs:{id:"api-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-2"}},[e._v("#")]),e._v(" api")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 获取订单支付状态\n//URL:/ap1/payment/weixin/queryPayStatus/{orderId} method:get   需要带参数orderId\nexport const reqPayStatus = (orderId) =>\n  requests({ url: `/payment/weixin/queryPayStatus/${orderId}`, method: "get" });\n')])])]),a("h3",{attrs:{id:"查询支付状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询支付状态"}},[e._v("#")]),e._v(" 查询支付状态")]),e._v(" "),a("p",[e._v("定时向服务器发送查询支付状态的请求，成功则关闭定时器，关闭弹窗，跳转至下一路由。这里在组件中新建两个data，time:null, code:'',")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 如果还没有定时器则开启一个定时器\n    if (!this.timer) {\n    this.timer = setInterval(async () => {\n      // 定时向服务器发送查询支付状态的请求\n      let result = this.$API.reqPayStatus(this.orderId);\n      // 如果已支付成功\n      if (result.code == 200) {\n        // 清除定时器并将this.timer置空\n        clearInterval(this.timer);\n        this.timer = null;\n        // 保存返回的支付状态码\n        this.code = result.code;\n        // 关闭弹窗，并跳到下一路由\n        this.$msgbox.close();\n        this.$router.push('/paysuccess');\n      }\n    }, 2000);\n}\n")])])]),a("h3",{attrs:{id:"点击已完成支付和支付遇到问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#点击已完成支付和支付遇到问题"}},[e._v("#")]),e._v(" 点击已完成支付和支付遇到问题")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("beforeClose是MessageBox组件的一个属性，是点击弹窗按钮的方法的所在位置\n\nbeforeClose: (type, instance, done) => {\n  //type：区分取消|确定按钮\n  //instance：当前组件实例\n  //done：关闭弹出框的方法\n\n  if (type == 'cancel') {\n    // 点击支付有问题：弹出提醒消息，清除定时器并将this.timer置空，关闭弹窗\n    alert('请联系管理人员');\n    clearInterval(this.timer);\n    this.timer = null;\n    done();\n  }\n  else {\n    // 点击支付成功：确认是否真的已支付成功，清除定时器并将this.timer置空，关闭弹窗，并跳到下一路由\n    if (this.code == 200) {\n      // 这里的this.code是前面弹窗出现后，定时向服务器发送的查询支付状态返回的结果保存到本组件的data\n      clearInterval(this.timer);\n      this.timer = null;\n      this.$msgbox.close();\n      this.$router.push('/paysuccess');\n    }\n  }\n}\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);